{"version":3,"sources":["index.js"],"names":["Square","props","winClass","isWinningSquare","className","onClick","value","Board","i","undefined","this","winningSquares","k","length","squares","board","key","columns","j","push","renderSquare","row","React","Component","Game","reorderList","setState","reorderMoves","state","history","Array","fill","coordinate","symbol","stepNumber","xIsNext","index","slice","current","coord","calculateWinner","concat","step","winnerObj","moveNum","winner","stepCount","line","status","moves","map","move","classBold","desc","jumpTo","newMovesList","handleClick","toggleButton","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a39f28d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n  \r\nfunction Square(props) {\r\n\r\n    let winClass = \"\";\r\n\r\n    if(props.isWinningSquare){\r\n      winClass = \" winningSquare\";\r\n    }\r\n\r\n    return (\r\n        <button className={\"square\" + winClass} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n\r\n    let isWinningSquare = false;\r\n\r\n    if(this.props.winningSquares !== undefined){\r\n      for(let k = 0; k < this.props.winningSquares.length; k++){\r\n        if(i === this.props.winningSquares[k]){\r\n          isWinningSquare = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n    <Square\r\n      key={i}\r\n      isWinningSquare={isWinningSquare}\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n    />\r\n      );\r\n  }\r\n\r\n  render() {\r\n\r\n    let board = [];\r\n    let key = 0;\r\n\r\n    for (let i = 0; i < 3; i++){\r\n      let columns = [];\r\n      for(let j = 0; j < 3; j++){\r\n        columns.push(this.renderSquare(i*3 + j));\r\n        key++;\r\n      }\r\n      let row = <div key={key} className=\"board-row\">\r\n        {columns}\r\n      </div>\r\n      board.push(row);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {board}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        coordinate: null,\r\n        symbol: null,\r\n        winningSquares:[],\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      reorderMoves: false\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const coord = getCoordinate(i);\r\n    \r\n    if(squares[i]){\r\n        return;\r\n    }\r\n\r\n    if(calculateWinner(current.squares)!==null){\r\n      if(calculateWinner(current.squares).squares){\r\n        return;\r\n      }\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n          coordinate: coord,\r\n          symbol: squares[i]\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  reorderList = () => {\r\n    this.setState({\r\n      reorderMoves: !this.state.reorderMoves,\r\n    });\r\n  }\r\n\r\n  toggleButton() {\r\n    return (\r\n        <button onClick={this.reorderList}>\r\n            Toggle list order\r\n        </button>\r\n    )\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winnerObj = calculateWinner(current.squares);\r\n    const moveNum = this.state.stepNumber;\r\n    let winner = null;\r\n    let stepCount = 0;\r\n\r\n    if(winnerObj !== null){\r\n      winner = winnerObj.squares;\r\n      current.winningSquares = winnerObj.line;\r\n    }\r\n    \r\n    let moves = history.map((step, move) => {\r\n\r\n      let classBold = \"none\";\r\n\r\n      if(stepCount === this.state.stepNumber){\r\n        classBold = \"activeListButton\";\r\n      }\r\n      \r\n      const desc = move ?\r\n      'Go to move #' + move + \" by \" + step.symbol + \". Coordinates = \" + step.coordinate:\r\n      'Go to game start';\r\n\r\n      stepCount++;\r\n\r\n      return (\r\n        <li key={move}>\r\n          <button className={classBold} onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if(this.state.reorderMoves === true){\r\n      let newMovesList = [];\r\n      for(let i = 0; i < moves.length; i++){\r\n        newMovesList.push(moves[moves.length - (i+1)]);\r\n      }\r\n      moves = newMovesList;\r\n    }\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ?\r\n        'X' : 'O');\r\n    }\r\n\r\n    if(winner === null && moveNum === 9) {\r\n      status = 'It\\'s a tie';\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            winningSquares={current.winningSquares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <div>{this.toggleButton()}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {squares:squares[a], line:lines[i]};\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getCoordinate(index) {\r\n  if(index === null) return null;\r\n  let coordinates = {\r\n    0:\"row: 1, column: 1\",\r\n    1:\"row: 1, column: 2\",\r\n    2:\"row: 1, column: 3\",\r\n    3:\"row: 2, column: 1\",\r\n    4:\"row: 2, column: 2\",\r\n    5:\"row: 2, column: 3\",\r\n    6:\"row: 3, column: 1\",\r\n    7:\"row: 3, column: 2\",\r\n    8:\"row: 3, column: 3\"\r\n  }\r\n  return coordinates[index];\r\n}"],"sourceRoot":""}